
<style>
    @font-face {
        font-family: DINCondBold;
        /*这里是说明调用来的字体名字*/
        src: url('/Report/resource/report/custom/ttf/DINCond-Bold.otf');
        /*这里是字体文件路径*/
    }
</style>
<div id="enterprise-category-container" style="width: 100%; height:100%; background-color:transparent;></div>
<script type="text/javascript" src="/Report/resource/report/custom/js/echarts.min.js"></script>
<script type="text/javascript">
    var dom = document.getElementById("enterprise-category-container");
    var myChart = echarts.init(dom);

    // init data
    var colorList = [{
        type: 'linear',
        x: 0,
        y: 0,
        x2: 1,
        y2: 0,
        colorStops: [{
            offset: 0,
            color: '#2A48C7' // 0% 处的颜色
        }, {
            offset: 1,
            color: '#55ACFB' // 100% 处的颜色
        }],
    }, {
        type: 'linear',
        x: 0,
        y: 0,
        x2: 1,
        y2: 0,
        colorStops: [{
            offset: 0,
            color: '#0A4F58' // 0% 处的颜色
        }, {
            offset: 1,
            color: '#23C2A6' // 100% 处的颜色
        }],
    }, {
        type: 'linear',
        x: 0,
        y: 0,
        x2: 1,
        y2: 0,
        colorStops: [{
            offset: 0,
            color: '#98520E' // 0% 处的颜色
        }, {
            offset: 1,
            color: '#D1BE31' // 100% 处的颜色
        }],
    }, {
        type: 'linear',
        x: 0,
        y: 0,
        x2: 1,
        y2: 0,
        colorStops: [{
            offset: 0,
            color: '#992E2F' // 0% 处的颜色
        }, {
            offset: 1,
            color: '#E35E5F' // 100% 处的颜色
        }],
    }, {
        type: 'linear',
        x: 0,
        y: 0,
        x2: 1,
        y2: 0,
        colorStops: [{
            offset: 0,
            color: '#150847' // 0% 处的颜色
        }, {
            offset: 1,
            color: '#6C44E2' // 100% 处的颜色
        }],
    }]


    // var lineargroup = [{
    //     value: 100,
    //     oriname: "意向",
    // }, {
    //     value: 80,
    //     oriname: "方案",
    // }, {
    //     value: 60,
    //     oriname: "商務",
    // }, {
    //     value: 40,
    //     oriname: "即將成交",
    // }, {
    //     value: 20,
    //     oriname: "即將成交01",
    // }];

    var lineargroup = []
    var initData = []
    var othersData = []



    var currentBlock = null;
    for(var i = 0; i < $Report.viewBlocks.count; i++){
      if($Report.viewBlocks.item(i).blockName == "垂直表_企业分布"){
        currentBlock = $Report.viewBlocks.item(i);
      }
    }
    var arr = []
    for(var i = 0; i < currentBlock.blockDataToDraw.length; i++){
        var obj = {};
        var viewTableRow = currentBlock.viewTableBody.viewTableRows.item(0);
        obj.oriname = currentBlock.blockDataToDraw[i][viewTableRow.viewTableCells.item(0).cellObject[0]+'___'+viewTableRow.viewTableCells.item(0).cellObject[1]] || 0;
        obj.value = currentBlock.blockDataToDraw[i][viewTableRow.viewTableCells.item(1).cellObject[0]+'___'+viewTableRow.viewTableCells.item(1).cellObject[1]];
       
        arr.push(obj);
    }

    // 排序
    var initData = arr.sort((a,b)=> {
      return b.value - a.value //降序 由高到底
    });

    initData.forEach((item,index) =>{
        if(index ===0 || index === 1 || index === 2 || index === 3){
            lineargroup.push({
                value: item.value,
                oriname: item.oriname
            })
        }
    })
 
    othersData = initData.filter((item,index) => {
        return index > 3
    })
    var othersValue = othersData.reduce((accumulator, currentValue) => {
        return Number(accumulator) + Number(currentValue.value)
    }, 0)


    lineargroup.push({
        value: othersValue,
        oriname: '未细分行业'
    })

    lineargroup = lineargroup.sort((a,b)=> {
      return b.value - a.value //降序 由高到底
    });


    var seriesData = lineargroup.map((i,index) => {
        return {
            value: 100 - index *20,
            name: i.oriname
        }
    })
    var legendData = lineargroup.map(i => {
        return {
            value: i.value,
            name: i.oriname
        }
    })

    var option = {
        legend: {
            orient: 'vertical',
            left: '40%',
            top: 'center',
            orient: 'vertical',
            icon: 'roundRect',
            itemGap: 8 * $BDA.defaultRatio,
            itemWidth: 12 * $BDA.defaultRatio,
            itemHeight: 10 * $BDA.defaultRatio,
            formatter: (name) => {
                var totalCount = legendData.reduce((accumulator, currentValue) => {
                    return Number(accumulator) + Number(currentValue.value)
                }, 0)
                const idx = legendData.findIndex(v => v.name === name)
                if (idx < 0) {
                    return ''
                }


                var splitName = legendData[idx].name


                let tip1 = "";
                let tip = "";
                let le = splitName.length //图例文本的长度
                if (le > 10) { //几个字换行大于几就可以了
                    let l = Math.ceil(le / 10) //有些不能整除，会有余数，向上取整
                    for (let i = 1; i <= l; i++) { //循环
                        if (i < l) { //最后一段字符不能有\n
                            tip1 += splitName.slice(i * 10 - 10, i * 10) + '\n'; //字符串拼接
                        } else if (i === l) { //最后一段字符不一定够9个
                            tip = tip1 + splitName.slice((l - 1) * 10, le) //最后的拼接在最后
                        }
                    }
                } else {
                    tip = splitName //前面定义了tip为空，这里要重新赋值，不然会替换为空

                }
                return (
                    `{name|${tip}}\r\r{a|${(Number(legendData[idx].value)*100/totalCount).toFixed(2)}%}\r\r\r\r{b|${legendData[idx].value}}`
                )
            },
            textStyle: {
                fontSize: 12 * $BDA.defaultRatio,
                color: '#BED3F8',
                rich: {
                    name: {
                        width: 140 * $BDA.defaultRatio,
                        fontSize: 12 * $BDA.defaultRatio,
                    },
                    a: {
                        width: 35 * $BDA.defaultRatio,
                        fontSize: 12 * $BDA.defaultRatio,
                        align: 'center',
                        fontFamily: 'DINCondBold',
                        fontWeight: 700,
                        color: "#98a8da",
                        paddingLeft: 10 * $BDA.defaultRatio
                    },
                    b: {
                        fontSize: 16 * $BDA.defaultRatio,
                        align: 'center',
                        fontFamily: 'DINCondBold',
                        fontWeight: 700,
                        textAlign: 'right',
                        color: '#59b0f2',
                        paddingLeft: 8 * $BDA.defaultRatio
                    }
                },
            },
        },
        series: [{
            top: 'center',
            type: 'funnel',
            color: colorList,
            height: 140 * $BDA.defaultRatio + '',
            gap: 5 * $BDA.defaultRatio,
            maxSize: 160 * $BDA.defaultRatio,
            minSize: 20 * $BDA.defaultRatio,
            left: '2%',
            width: '35%',
            label: {
                show: false,
                position: 'inside',
                fontSize: 14 * $BDA.defaultRatio + '',
                formatter: function() {
                    return ''
                },
                rich: {
                    aa: {
                        padding: [8 * $BDA.defaultRatio, 0, 6 * $BDA.defaultRatio, 0]
                    }
                }
            },
            itemStyle: {
                normal: {
                    opacity: 08, // 系列2图形透明度
                    borderColor: '#fff', // 图形边框颜色
                    borderWidth: 0 // 图形边框宽度大小
                }
            },
            data: seriesData
        }]
    };

    if (option && typeof option === 'object') {
        myChart.setOption(option);
    }
</script>